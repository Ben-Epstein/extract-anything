/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
'use server'

import { b } from '../index';
import type { Check, Checked  } from "../types";
import type { Image, Audio } from "@boundaryml/baml";

import type {  Address,  AgreementType,  ConfidentialInformation,  ContactPerson,  DeadlineReport,  DisputeResolution,  Duration,  Exhibit,  Milestone,  NDA,  Obligation,  Party,  PartyRole,  Remedy,  Response,  Risk,  RiskAnalysis,  RiskLevel,  Schema,  Signature,  TimeUnit } from "../types"

import type * as types from "../types"

/**
 * Regular BAML server actions that return direct responses.
 */

/**
 * Executes the "AnalyzeNDARisks" BAML action.
 *
 * This server action calls the underlying BAML function "AnalyzeNDARisks"
 * with the specified parameters.
 *
 * @param { NDA } nda - Input parameter.
 *
 * @returns {Promise<RiskAnalysis>} A promise that resolves with the result of the action.
 */
export const AnalyzeNDARisks = async (
  nda: NDA,
): Promise<RiskAnalysis> => {
  return b.AnalyzeNDARisks(
    nda,
  );
};

/**
 * Executes the "ExecuteBAML" BAML action.
 *
 * This server action calls the underlying BAML function "ExecuteBAML"
 * with the specified parameters.
 *
 * @param { string | Image | Audio | Image[] } content - Input parameter.
 *
 * @returns {Promise<Response>} A promise that resolves with the result of the action.
 */
export const ExecuteBAML = async (
  content: string | Image | Audio | Image[],
): Promise<Response> => {
  return b.ExecuteBAML(
    content,
  );
};

/**
 * Executes the "ExtractNDA" BAML action.
 *
 * This server action calls the underlying BAML function "ExtractNDA"
 * with the specified parameters.
 *
 * @param { string | Image | Image[] } document - Input parameter.
 *
 * @returns {Promise<NDA>} A promise that resolves with the result of the action.
 */
export const ExtractNDA = async (
  document: string | Image | Image[],
): Promise<NDA> => {
  return b.ExtractNDA(
    document,
  );
};

/**
 * Executes the "GenerateBAML" BAML action.
 *
 * This server action calls the underlying BAML function "GenerateBAML"
 * with the specified parameters.
 *
 * @param { string | Image | Audio | Image[] } content - Input parameter.
 *
 * @returns {Promise<Schema>} A promise that resolves with the result of the action.
 */
export const GenerateBAML = async (
  content: string | Image | Audio | Image[],
): Promise<Schema> => {
  return b.GenerateBAML(
    content,
  );
};

/**
 * Executes the "TrackDeadlines" BAML action.
 *
 * This server action calls the underlying BAML function "TrackDeadlines"
 * with the specified parameters.
 *
 * @param { NDA } nda - Input parameter.
 *
 * @returns {Promise<DeadlineReport>} A promise that resolves with the result of the action.
 */
export const TrackDeadlines = async (
  nda: NDA,
): Promise<DeadlineReport> => {
  return b.TrackDeadlines(
    nda,
  );
};