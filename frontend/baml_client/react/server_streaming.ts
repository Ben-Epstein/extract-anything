/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
'use server'

import { b } from '../index';
import type { Check, Checked  } from "../types";
import type { Image, Audio } from "@boundaryml/baml";

import type {  Address,  AgreementType,  ConfidentialInformation,  ContactPerson,  DeadlineReport,  DisputeResolution,  Duration,  Exhibit,  Milestone,  NDA,  Obligation,  Party,  PartyRole,  Remedy,  Response,  Risk,  RiskAnalysis,  RiskLevel,  Schema,  Signature,  TimeUnit } from "../types"

import type * as types from "../types"

/**
 * Streaming BAML server actions that return ReadableStreams.
 */

/**
 * Executes the streaming variant of the "AnalyzeNDARisks" BAML action.
 *
 * This action initiates a streaming response by calling the corresponding
 * BAML stream function. The returned stream yields incremental updates.
 *
 * @param { NDA } nda - Input parameter.
 *
 * @returns {ReadableStream<Uint8Array>} A stream that yields incremental updates from the action.
 */
export const AnalyzeNDARisks = async (
  nda: NDA,
): Promise<ReadableStream<Uint8Array>> => {
  const stream = b.stream.AnalyzeNDARisks(
    nda,
  );
  return Promise.resolve(stream.toStreamable());
};

/**
 * Executes the streaming variant of the "ExecuteBAML" BAML action.
 *
 * This action initiates a streaming response by calling the corresponding
 * BAML stream function. The returned stream yields incremental updates.
 *
 * @param { string | Image | Audio | Image[] } content - Input parameter.
 *
 * @returns {ReadableStream<Uint8Array>} A stream that yields incremental updates from the action.
 */
export const ExecuteBAML = async (
  content: string | Image | Audio | Image[],
): Promise<ReadableStream<Uint8Array>> => {
  const stream = b.stream.ExecuteBAML(
    content,
  );
  return Promise.resolve(stream.toStreamable());
};

/**
 * Executes the streaming variant of the "ExtractNDA" BAML action.
 *
 * This action initiates a streaming response by calling the corresponding
 * BAML stream function. The returned stream yields incremental updates.
 *
 * @param { string | Image | Image[] } document - Input parameter.
 *
 * @returns {ReadableStream<Uint8Array>} A stream that yields incremental updates from the action.
 */
export const ExtractNDA = async (
  document: string | Image | Image[],
): Promise<ReadableStream<Uint8Array>> => {
  const stream = b.stream.ExtractNDA(
    document,
  );
  return Promise.resolve(stream.toStreamable());
};

/**
 * Executes the streaming variant of the "GenerateBAML" BAML action.
 *
 * This action initiates a streaming response by calling the corresponding
 * BAML stream function. The returned stream yields incremental updates.
 *
 * @param { string | Image | Audio | Image[] } content - Input parameter.
 *
 * @returns {ReadableStream<Uint8Array>} A stream that yields incremental updates from the action.
 */
export const GenerateBAML = async (
  content: string | Image | Audio | Image[],
): Promise<ReadableStream<Uint8Array>> => {
  const stream = b.stream.GenerateBAML(
    content,
  );
  return Promise.resolve(stream.toStreamable());
};

/**
 * Executes the streaming variant of the "TrackDeadlines" BAML action.
 *
 * This action initiates a streaming response by calling the corresponding
 * BAML stream function. The returned stream yields incremental updates.
 *
 * @param { NDA } nda - Input parameter.
 *
 * @returns {ReadableStream<Uint8Array>} A stream that yields incremental updates from the action.
 */
export const TrackDeadlines = async (
  nda: NDA,
): Promise<ReadableStream<Uint8Array>> => {
  const stream = b.stream.TrackDeadlines(
    nda,
  );
  return Promise.resolve(stream.toStreamable());
};