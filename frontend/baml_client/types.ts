/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { Image, Audio } from "@boundaryml/baml"

/**
 * Recursively partial type that can be null.
 *
 * @deprecated Use types from the `partial_types` namespace instead, which provides type-safe partial implementations
 * @template T The type to make recursively partial.
 */
export type RecursivePartialNull<T> = T extends object
    ? { [P in keyof T]?: RecursivePartialNull<T[P]> }
    : T | null;

export interface Checked<T,CheckName extends string = string> {
    value: T,
    checks: Record<CheckName, Check>,
}


export interface Check {
    name: string,
    expr: string
    status: "succeeded" | "failed"
}

export function all_succeeded<CheckName extends string>(checks: Record<CheckName, Check>): boolean {
    return get_checks(checks).every(check => check.status === "succeeded")
}

export function get_checks<CheckName extends string>(checks: Record<CheckName, Check>): Check[] {
    return Object.values(checks)
}
export enum AgreementType {
  MUTUAL = "MUTUAL",
  UNILATERAL = "UNILATERAL",
}

export enum PartyRole {
  DISCLOSING_PARTY = "DISCLOSING_PARTY",
  RECEIVING_PARTY = "RECEIVING_PARTY",
  BOTH = "BOTH",
}

export enum RiskLevel {
  LOW = "LOW",
  MEDIUM = "MEDIUM",
  HIGH = "HIGH",
}

export enum TimeUnit {
  DAYS = "DAYS",
  MONTHS = "MONTHS",
  YEARS = "YEARS",
  INDEFINITE = "INDEFINITE",
}

export interface Address {
  street: string
  city: string
  state: string
  zip: string
  country?: string | null
  
}

export interface ConfidentialInformation {
  general_definition: string
  specific_items: string[]
  
}

export interface ContactPerson {
  name: string
  title: string
  email: string
  phone?: string | null
  
}

export interface DeadlineReport {
  expiration_date: Checked<string,"valid_date_format">
  confidentiality_end_date: Checked<string,"valid_date_format">
  key_milestones: Milestone[]
  
}

export interface DisputeResolution {
  method: string
  location: string
  
}

export interface Duration {
  length: number
  unit: TimeUnit
  
}

export interface Exhibit {
  title: string
  content: string
  
}

export interface Milestone {
  name: string
  date: Checked<string,"valid_date_format">
  description: string
  
}

export interface NDA {
  title: string
  effective_date: string
  agreement_type: AgreementType
  parties: Party[]
  confidential_information: ConfidentialInformation
  exclusions: string[]
  obligations: Obligation[]
  term_duration: Duration
  confidentiality_period: Duration
  governing_law: string
  dispute_resolution: DisputeResolution
  remedies: Remedy[]
  exhibits: Exhibit[]
  signatures: Signature[]
  
}

export interface Obligation {
  party_name: string
  descriptions: string[]
  
}

export interface Party {
  name: string
  type: string
  address: Address
  role: PartyRole
  contact_person?: ContactPerson | null
  
}

export interface Remedy {
  type: string
  description: string
  
}

export interface Response {
  
  [key: string]: any;
}

export interface Risk {
  section: string
  description: string
  severity: RiskLevel
  potential_impact: string
  
}

export interface RiskAnalysis {
  overall_risk_level: RiskLevel
  key_risks: Risk[]
  recommendations: string[]
  
}

export interface Schema {
  interface_code: string
  return_type: string
  other_code: string
  
}

export interface Signature {
  party_name: string
  signatory_name: string
  title: string
  date: string
  
}
