###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401,F821
# flake8: noqa: E501,F401,F821
# pylint: disable=unused-import,line-too-long
# fmt: off
from enum import Enum
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union

import baml_py
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias

from . import types
from .types import Check, Checked

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class Address(BaseModel):
    street: Optional[str] = None
    city: Optional[str] = None
    state: Optional[str] = None
    zip: Optional[str] = None
    country: Optional[str] = None

class ConfidentialInformation(BaseModel):
    general_definition: Optional[str] = None
    specific_items: List[str]

class ContactPerson(BaseModel):
    name: Optional[str] = None
    title: Optional[str] = None
    email: Optional[str] = None
    phone: Optional[str] = None

class DeadlineReport(BaseModel):
    expiration_date: Checked[Optional[str],Literal["valid_date_format"]]
    confidentiality_end_date: Checked[Optional[str],Literal["valid_date_format"]]
    key_milestones: List["Milestone"]

class DisputeResolution(BaseModel):
    method: Optional[str] = None
    location: Optional[str] = None

class Duration(BaseModel):
    length: Optional[int] = None
    unit: Optional[types.TimeUnit] = None

class Exhibit(BaseModel):
    title: Optional[str] = None
    content: Optional[str] = None

class Milestone(BaseModel):
    name: Optional[str] = None
    date: Checked[Optional[str],Literal["valid_date_format"]]
    description: Optional[str] = None

class NDA(BaseModel):
    title: Optional[str] = None
    effective_date: Optional[str] = None
    agreement_type: Optional[str] = None
    parties: List["Party"]
    confidential_information: Optional["ConfidentialInformation"] = None
    exclusions: List[str]
    obligations: List["Obligation"]
    term_duration: Optional["Duration"] = None
    confidentiality_period: Optional["Duration"] = None
    governing_law: Optional[str] = None
    dispute_resolution: Optional["DisputeResolution"] = None
    remedies: List["Remedy"]
    exhibits: List["Exhibit"]
    signatures: List["Signature"]

class Obligation(BaseModel):
    party_name: Optional[str] = None
    descriptions: List[str]

class Party(BaseModel):
    name: Optional[str] = None
    type: Optional[str] = None
    address: Optional["Address"] = None
    role: Optional[types.PartyRole] = None
    contact_person: Optional["ContactPerson"] = None

class Remedy(BaseModel):
    type: Optional[str] = None
    description: Optional[str] = None

class Response(BaseModel):
    model_config = ConfigDict(extra='allow')

class Risk(BaseModel):
    section: Optional[str] = None
    description: Optional[str] = None
    severity: Optional[types.RiskLevel] = None
    potential_impact: Optional[str] = None

class RiskAnalysis(BaseModel):
    overall_risk_level: Optional[types.RiskLevel] = None
    key_risks: List["Risk"]
    recommendations: List[str]

class Schema(BaseModel):
    interface_code: Optional[str] = None
    return_type: Optional[str] = None
    other_code: Optional[str] = None

class Signature(BaseModel):
    party_name: Optional[str] = None
    signatory_name: Optional[str] = None
    title: Optional[str] = None
    date: Optional[str] = None
