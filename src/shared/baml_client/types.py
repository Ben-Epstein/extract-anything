###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401,F821
# flake8: noqa: E501,F401,F821
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class AgreementType(str, Enum):
    
    MUTUAL = "MUTUAL"
    UNILATERAL = "UNILATERAL"

class PartyRole(str, Enum):
    
    DISCLOSING_PARTY = "DISCLOSING_PARTY"
    RECEIVING_PARTY = "RECEIVING_PARTY"
    BOTH = "BOTH"

class RiskLevel(str, Enum):
    
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"

class TimeUnit(str, Enum):
    
    DAYS = "DAYS"
    MONTHS = "MONTHS"
    YEARS = "YEARS"
    INDEFINITE = "INDEFINITE"

class Address(BaseModel):
    street: str
    city: str
    state: str
    zip: str
    country: Optional[str] = None

class ConfidentialInformation(BaseModel):
    general_definition: str
    specific_items: List[str]

class ContactPerson(BaseModel):
    name: str
    title: str
    email: str
    phone: Optional[str] = None

class DeadlineReport(BaseModel):
    expiration_date: Checked[str,Literal["valid_date_format"]]
    confidentiality_end_date: Checked[str,Literal["valid_date_format"]]
    key_milestones: List["Milestone"]

class DisputeResolution(BaseModel):
    method: str
    location: str

class Duration(BaseModel):
    length: int
    unit: "TimeUnit"

class Exhibit(BaseModel):
    title: str
    content: str

class Milestone(BaseModel):
    name: str
    date: Checked[str,Literal["valid_date_format"]]
    description: str

class NDA(BaseModel):
    title: str
    effective_date: str
    agreement_type: "AgreementType"
    parties: List["Party"]
    confidential_information: "ConfidentialInformation"
    exclusions: List[str]
    obligations: List["Obligation"]
    term_duration: "Duration"
    confidentiality_period: "Duration"
    governing_law: str
    dispute_resolution: "DisputeResolution"
    remedies: List["Remedy"]
    exhibits: List["Exhibit"]
    signatures: List["Signature"]

class Obligation(BaseModel):
    party_name: str
    descriptions: List[str]

class Party(BaseModel):
    name: str
    type: str
    address: "Address"
    role: "PartyRole"
    contact_person: Optional["ContactPerson"] = None

class Remedy(BaseModel):
    type: str
    description: str

class Response(BaseModel):
    model_config = ConfigDict(extra='allow')

class Risk(BaseModel):
    section: str
    description: str
    severity: "RiskLevel"
    potential_impact: str

class RiskAnalysis(BaseModel):
    overall_risk_level: "RiskLevel"
    key_risks: List["Risk"]
    recommendations: List[str]

class Schema(BaseModel):
    interface_code: str
    return_type: str
    other_code: str

class Signature(BaseModel):
    party_name: str
    signatory_name: str
    title: str
    date: str
